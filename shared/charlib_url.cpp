#include "charlib_url.h"
#include "c20.h"


static const char cpUrlSafeChar[] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x2B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x2E, 0x00,
	0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F,
	0x00, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
	0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x5F,
	0x00, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
	0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

BOOL IsSafeChar(const char cpInChar)
{
	return (BOOL)cpUrlSafeChar[cpInChar];// isalnum(cpInChar) || cpInChar == '.' || cpInChar == '-' || cpInChar == '_' || cpInChar == '*';
}

#define HEXCHAR_UPPER const char cpHexCharUpper[] = "0123456789ABCDEF"
#define HEXCHAR_LOWER const char cpHexCharLower[] = "0123456789abcdef"

size_t CharToUrlEncodeLength(const char* cpInChar)
{
	char* p;
	size_t DstCount = 0;

	p = (char*)cpInChar;
	while (*p != '\0')
	{
		if (cpUrlSafeChar[*p++]) {
			++DstCount;
		}
		else {
			DstCount += 3;
		}
	}
	return DstCount;
}

char* CharToUrlEncode(const char* cpInChar)
{
	size_t iBufferSize;
	char* pBufChar;
	char* p;
	char* pDst;
	HEXCHAR_LOWER;

	iBufferSize = CharToUrlEncodeLength(cpInChar);
	pBufChar = (char*)malloc(iBufferSize + 1);
	IF_UNLIKELY(pBufChar == NULL) {
		return NULL;
	}
	pDst = pBufChar;
	p = (char*)cpInChar;
	while (*p != '\0')
	{
		const char szByte = *p++;

		if ((*pDst = cpUrlSafeChar[szByte]) != 0) {
			pDst++;
		}
		else
		{		
			*pDst++ = '%';
			*pDst++ = cpHexCharLower[(szByte & 0xF0) >> 4];
			*pDst++ = cpHexCharLower[(szByte & 0x0F)];
		}
	}
	*pDst = '\0';
	return pBufChar;
}

char* Utf8CharToUrlEncodeChar(const char* cpInChar)
{
	char* pBufUtf8Char;
	char* pBufChar;

	pBufUtf8Char = CharToUtf8CharConv(cpInChar);
	IF_UNLIKELY(pBufUtf8Char == NULL) {
		return NULL;
	}
	pBufChar = CharToUrlEncode(pBufUtf8Char);
	free(pBufUtf8Char);
	return pBufChar;
}

char* WCharToUrlEncodeChar(const WCHAR* cpInWChar)
{
	char* pBufUtf8Char;
	char* pBufChar;

	pBufUtf8Char = WCharToUtf8CharConv(cpInWChar, NULL);
	IF_UNLIKELY(pBufUtf8Char == NULL) {
		return NULL;
	}
	pBufChar = CharToUrlEncode(pBufUtf8Char);
	free(pBufUtf8Char);
	return pBufChar;
}

WCHAR* WCharToUrlEncodeWChar(const WCHAR* cpInWChar)
{
	char* pBufUtf8Char;
	char* pTmp;
	WCHAR* pBufWChar;

	pBufUtf8Char = WCharToUtf8CharConv(cpInWChar, NULL);
	IF_UNLIKELY(pBufUtf8Char == NULL) {
		return NULL;
	}
	pTmp = CharToUrlEncode(pBufUtf8Char);
	IF_UNLIKELY(pTmp == NULL)
	{
		free(pBufUtf8Char);
		return NULL;
	}
	free(pBufUtf8Char);
	pBufWChar = CharToWCharConv(pTmp);
	free(pTmp);
	return pBufWChar;
}

WCHAR* CharToUrlEncodeWChar(const char* cpInChar)
{
	char* pBufChar;
	WCHAR* pBufWChar;

	pBufChar = CharToUrlEncode(cpInChar);
	IF_UNLIKELY(pBufChar == NULL) {
		return NULL;
	}
	pBufWChar = CharToWCharConv(pBufChar);
	free(pBufChar);
	return pBufWChar;
}

WCHAR* Utf8CharToUrlEncodeWChar(const char* cpInChar)
{
	char* pBufUtf8Char;
	char* pBufChar;
	WCHAR* pBufWChar;

	pBufUtf8Char = CharToUtf8CharConv(cpInChar);
	IF_UNLIKELY(pBufUtf8Char == NULL) {
		return NULL;
	}
	pBufChar = CharToUrlEncode(pBufUtf8Char);
	IF_UNLIKELY(pBufChar == NULL)
	{
		free(pBufUtf8Char);
		return NULL;
	}
	free(pBufUtf8Char);
	pBufWChar = CharToWCharConv(pBufChar);
	free(pBufChar);
	return pBufWChar;
}
